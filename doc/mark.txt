
.. _mark:

Marking test functions with attributes
=================================================================

.. currentmodule:: _pytest.mark

By using the ``pytest.mark`` helper you can easily set
metadata on your test functions. To begin with, there are
some builtin markers, for example:

* skipif - skip a test function if a certain condition is met
* xfail - produce an "expected failure" outcome if a certain
  condition is met

It's also easy to create custom markers or to apply markers
to whole test classes or modules.

marking test functions and selecting them for a run
----------------------------------------------------

You can "mark" a test function with custom metadata like this::

    # content of test_server.py

    import pytest
    @pytest.mark.webtest
    def test_send_http():
        pass # perform some webtest test for your app

.. versionadded:: 2.2

You can restrict a test run only tests marked with ``webtest`` like this::

    $ py.test -m webtest

Or the inverse, running all tests except the webtest ones::
    
    $ py.test -m "not webtest"

Registering markers
-------------------------------------

.. versionadded:: 2.2

.. ini-syntax for custom markers:

Registering markers for your test suite is simple::

    # content of pytest.ini
    [pytest]
    markers = 
        webtest: mark a test as a webtest. 

You can ask which markers exist for your test suite::

    $ py.test --markers

For an example on how to add and work markers from a plugin, see 
:ref:`adding a custom marker from a plugin`.

.. note::

    It is recommended to explicitely register markers so that:

    * there is one place in your test suite defining your markers

    * asking for existing markers via ``py.test --markers`` gives good output

    * typos in function markers can be treated as an error if you use
      the :ref:`--strict` option.  Later versions of py.test might treat
      non-registered markers as an error by default.

.. _`scoped-marking`:

Marking whole classes or modules
----------------------------------------------------

If you are programming with Python2.6 you may use ``pytest.mark`` decorators
with classes to apply markers to all of its test methods::

    # content of test_mark_classlevel.py
    import pytest
    @pytest.mark.webtest
    class TestClass:
        def test_startup(self):
            pass
        def test_startup_and_more(self):
            pass

This is equivalent to directly applying the decorator to the
two test functions.

To remain backward-compatible with Python2.4 you can also set a
``pytestmark`` attribute on a TestClass like this::

    import pytest

    class TestClass:
        pytestmark = pytest.mark.webtest

or if you need to use multiple markers you can use a list::

    import pytest

    class TestClass:
        pytestmark = [pytest.mark.webtest, pytest.mark.slowtest]

You can also set a module level marker::

    import pytest
    pytestmark = pytest.mark.webtest

in which case it will be applied to all functions and
methods defined in the module.

Using ``-k TEXT`` to select tests
----------------------------------------------------

You can use the ``-k`` command line option to select tests::

    $ py.test -k webtest  # running with the above defined examples yields
    =========================== test session starts ============================
    platform darwin -- Python 2.7.1 -- pytest-2.1.3
    collecting ... collected 4 items
    
    test_mark.py ..
    test_mark_classlevel.py ..
    
    ========================= 4 passed in 0.03 seconds =========================

And you can also run all tests except the ones that match the keyword::

    $ py.test -k-webtest
    =========================== test session starts ============================
    platform darwin -- Python 2.7.1 -- pytest-2.1.3
    collecting ... collected 4 items
    
    ===================== 4 tests deselected by '-webtest' =====================
    ======================= 4 deselected in 0.02 seconds =======================

Or to only select the class::

    $ py.test -kTestClass
    =========================== test session starts ============================
    platform darwin -- Python 2.7.1 -- pytest-2.1.3
    collecting ... collected 4 items
    
    test_mark_classlevel.py ..
    
    ==================== 2 tests deselected by 'TestClass' =====================
    ================== 2 passed, 2 deselected in 0.02 seconds ==================

API reference for mark related objects
------------------------------------------------

.. autoclass:: MarkGenerator
    :members:

.. autoclass:: MarkDecorator
    :members:

.. autoclass:: MarkInfo
    :members:

