
.. _mark:

Marking test functions with attributes
=================================================================

.. currentmodule:: _pytest.mark

By using the ``pytest.mark`` helper you can easily set
metadata on your test functions. To begin with, there are
some builtin markers, for example:

* skipif - skip a test function if a certain condition is met
* xfail - produce an "expected failure" outcome if a certain
  condition is met

It's also easy to create custom markers or to apply markers
to whole test classes or modules.

marking test functions and selecting them for a run
----------------------------------------------------

You can "mark" a test function with custom metadata like this::

    # content of test_server.py

    import pytest
    @pytest.mark.webtest
    def test_send_http():
        pass # perform some webtest test for your app
    def test_something_quick():
        pass

.. versionadded:: 2.2

You can then restrict a test run to only run tests marked with ``webtest``::

    $ py.test -v -m webtest
    ============================= test session starts ==============================
    platform darwin -- Python 2.7.1 -- pytest-2.2.0.dev6 -- /Users/hpk/venv/0/bin/python
    collecting ... collected 2 items
    
    test_server.py:3: test_send_http PASSED
    
    ===================== 1 tests deselected by "-m 'webtest'" =====================
    ==================== 1 passed, 1 deselected in 0.01 seconds ====================

Or the inverse, running all tests except the webtest ones::
    
    $ py.test -v -m "not webtest"
    ============================= test session starts ==============================
    platform darwin -- Python 2.7.1 -- pytest-2.2.0.dev6 -- /Users/hpk/venv/0/bin/python
    collecting ... collected 2 items
    
    test_server.py:6: test_something_quick PASSED
    
    =================== 1 tests deselected by "-m 'not webtest'" ===================
    ==================== 1 passed, 1 deselected in 0.01 seconds ====================

Registering markers
-------------------------------------

.. versionadded:: 2.2

.. ini-syntax for custom markers:

Registering markers for your test suite is simple::

    # content of pytest.ini
    [pytest]
    markers = 
        webtest: mark a test as a webtest. 

You can ask which markers exist for your test suite - the list includes our just defined ``webtest`` markers::

    $ py.test --markers
    @pytest.mark.webtest: mark a test as a webtest.
    
    @pytest.mark.skipif(*conditions): skip the given test function if evaluation of all conditions has a True value.  Evaluation happens within the module global context. Example: skipif('sys.platform == "win32"') skips the test if we are on the win32 platform. 
    
    @pytest.mark.xfail(*conditions, reason=None, run=True): mark the the test function as an expected failure. Optionally specify a reason and run=False if you don't even want to execute the test function. Any positional condition strings will be evaluated (like with skipif) and if one is False the marker will not be applied.
    
    @pytest.mark.tryfirst: mark a hook implementation function such that the plugin machinery will try to call it first/as early as possible.
    
    @pytest.mark.trylast: mark a hook implementation function such that the plugin machinery will try to call it last/as late as possible.
    

For an example on how to add and work markers from a plugin, see 
:ref:`adding a custom marker from a plugin`.

.. note::

    It is recommended to explicitely register markers so that:

    * there is one place in your test suite defining your markers

    * asking for existing markers via ``py.test --markers`` gives good output

    * typos in function markers are treated as an error if you use
      the ``--strict`` option. Later versions of py.test are probably
      going to treat non-registered markers as an error.

.. _`scoped-marking`:

Marking whole classes or modules
----------------------------------------------------

If you are programming with Python2.6 you may use ``pytest.mark`` decorators
with classes to apply markers to all of its test methods::

    # content of test_mark_classlevel.py
    import pytest
    @pytest.mark.webtest
    class TestClass:
        def test_startup(self):
            pass
        def test_startup_and_more(self):
            pass

This is equivalent to directly applying the decorator to the
two test functions.

To remain backward-compatible with Python2.4 you can also set a
``pytestmark`` attribute on a TestClass like this::

    import pytest

    class TestClass:
        pytestmark = pytest.mark.webtest

or if you need to use multiple markers you can use a list::

    import pytest

    class TestClass:
        pytestmark = [pytest.mark.webtest, pytest.mark.slowtest]

You can also set a module level marker::

    import pytest
    pytestmark = pytest.mark.webtest

in which case it will be applied to all functions and
methods defined in the module.

Using ``-k TEXT`` to select tests
----------------------------------------------------

You can use the ``-k`` command line option to only run tests with names that match the given argument::

    $ py.test -k send_http  # running with the above defined examples
    ============================= test session starts ==============================
    platform darwin -- Python 2.7.1 -- pytest-2.2.0.dev6
    collecting ... collected 4 items
    
    test_server.py .
    
    ===================== 3 tests deselected by '-ksend_http' ======================
    ==================== 1 passed, 3 deselected in 0.02 seconds ====================

And you can also run all tests except the ones that match the keyword::

    $ py.test -k-send_http
    ============================= test session starts ==============================
    platform darwin -- Python 2.7.1 -- pytest-2.2.0.dev6
    collecting ... collected 4 items
    
    test_mark_classlevel.py ..
    test_server.py .
    
    ===================== 1 tests deselected by '-k-send_http' =====================
    ==================== 3 passed, 1 deselected in 0.03 seconds ====================

Or to only select the class::

    $ py.test -kTestClass
    ============================= test session starts ==============================
    platform darwin -- Python 2.7.1 -- pytest-2.2.0.dev6
    collecting ... collected 4 items
    
    test_mark_classlevel.py ..
    
    ===================== 2 tests deselected by '-kTestClass' ======================
    ==================== 2 passed, 2 deselected in 0.02 seconds ====================

API reference for mark related objects
------------------------------------------------

.. autoclass:: MarkGenerator
    :members:

.. autoclass:: MarkDecorator
    :members:

.. autoclass:: MarkInfo
    :members:

